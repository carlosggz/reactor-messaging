package org.example.reactormessaging.infrastructure.properties;

import lombok.Data;
import lombok.NoArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

import java.util.Map;
import java.util.UUID;

@Data
@Configuration
@ConfigurationProperties(prefix = "spring.reactive.kafka")
@NoArgsConstructor
public class ReactorKafkaProperties {
    /**
     * Bootstrap servers
     * <p>Ex. 1.1.1.2:9092,1.1.1.3:9092</p>
     */
    private String servers;

    /**
     * Acks
     * <p>Optional default to "all"</p>
     */
    private String acks = "all";

    /**
     * Consumer group
     */
    private String groupId;

    /**
     * Client identifier
     * <p>Optional, by default autogenerated</p>
     */
    private String clientId;

    /**
     * Offset
     * <p>Optional, by default earliest</p>
     */
    private String offset = "earliest";

    /**
     * Bindings list
     */
    private Map<String, BindingSettings> bindings;

    public String getClientId() {
        if (StringUtils.isBlank(clientId)) {
            clientId = UUID.randomUUID().toString();
        }

        return clientId;
    }

    @Data
    @NoArgsConstructor
    public static class BindingSettings {

        /**
         * Topic name
         */
        private String topic;

        /**
         * Expected message type
         * <p>Default string</p>
         */
        private String targetType = null;
    }
}
